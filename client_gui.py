import tkinter as tk
from tkinter import scrolledtext, simpledialog, messagebox, ttk
import socket
import threading
import re

ENC = 'utf-8'
buffer = b""
selected_user = None
my_username = ""

def update_user_list():
    """G·ª≠i l·ªánh /list ƒë·ªÉ c·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi d√πng"""
    try:
        client.sendall("/list\n".encode(ENC))
    except:
        pass

def parse_user_list(message):
    """Ph√¢n t√≠ch danh s√°ch ng∆∞·ªùi d√πng t·ª´ tin nh·∫Øn server"""
    if message.startswith("Online: "):
        users_str = message[8:].strip()
        if users_str and users_str != "(tr·ªëng)":
            users = [u.strip() for u in users_str.split(",")]
            return users
    return None

def receive_messages():
    global buffer
    while True:
        try:
            data = client.recv(4096)
            if not data:
                chat_box.config(state=tk.NORMAL)
                chat_box.insert(tk.END, "\n[M·∫•t k·∫øt n·ªëi t·ªõi server]\n", "system")
                chat_box.config(state=tk.DISABLED)
                chat_box.see(tk.END)
                break
            buffer += data
            while b"\n" in buffer:
                line, buffer = buffer.split(b"\n", 1)
                message = line.decode(ENC, errors='ignore')
                
                # Ph√¢n t√≠ch danh s√°ch ng∆∞·ªùi d√πng
                users = parse_user_list(message)
                if users is not None:
                    update_user_listbox(users)
                
                # T·ª± ƒë·ªông c·∫≠p nh·∫≠t danh s√°ch khi c√≥ ng∆∞·ªùi v√†o/ra
                if message.startswith("*") and ("ƒë·ªïi t√™n th√†nh" in message or "ƒë√£ tho√°t" in message or "ƒë√£ tham gia" in message):
                    # ƒê·ª£i m·ªôt ch√∫t r·ªìi c·∫≠p nh·∫≠t danh s√°ch
                    root.after(100, update_user_list)
                
                # Hi·ªÉn th·ªã tin nh·∫Øn v·ªõi m√†u s·∫Øc
                chat_box.config(state=tk.NORMAL)
                if message.startswith("[PM t·ª´") or message.startswith("[PM ƒë·∫øn"):
                    chat_box.insert(tk.END, message + '\n', "pm")
                elif message.startswith("*"):
                    chat_box.insert(tk.END, message + '\n', "system")
                elif message.startswith("["):
                    chat_box.insert(tk.END, message + '\n', "message")
                else:
                    chat_box.insert(tk.END, message + '\n')
                chat_box.config(state=tk.DISABLED)
                chat_box.see(tk.END)
        except Exception as e:
            chat_box.config(state=tk.NORMAL)
            chat_box.insert(tk.END, f"\n[L·ªói: {e}]\n", "system")
            chat_box.config(state=tk.DISABLED)
            break

def update_user_listbox(users):
    """C·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi d√πng trong listbox"""
    if not users:
        return
    
    # S·ª≠ d·ª•ng after ƒë·ªÉ ƒë·∫£m b·∫£o c·∫≠p nh·∫≠t UI an to√†n t·ª´ thread
    def _update():
        user_listbox.delete(0, tk.END)
        user_listbox.insert(0, "üì¢ T·∫•t c·∫£")
        
        # S·∫Øp x·∫øp danh s√°ch: t√™n c·ªßa m√¨nh l√™n ƒë·∫ßu, sau ƒë√≥ c√°c t√™n kh√°c theo alphabet
        sorted_users = sorted(users, key=lambda x: (x != my_username, x))
        
        for user in sorted_users:
            user = user.strip()  # Lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a
            if not user:
                continue
            if user == my_username:
                # Hi·ªÉn th·ªã t√™n c·ªßa m√¨nh v·ªõi icon kh√°c
                user_listbox.insert(tk.END, f"üòä {user} (B·∫°n)")
            else:
                user_listbox.insert(tk.END, f"üë§ {user}")
    
    try:
        root.after(0, _update)
    except:
        _update()

def on_user_select(event):
    """X·ª≠ l√Ω khi ch·ªçn ng∆∞·ªùi d√πng t·ª´ danh s√°ch"""
    global selected_user
    selection = user_listbox.curselection()
    if selection:
        selected_text = user_listbox.get(selection[0])
        if selected_text == "üì¢ T·∫•t c·∫£":
            selected_user = None
            recipient_label.config(text="G·ª≠i ƒë·∫øn: T·∫•t c·∫£", fg="#2196F3")
        elif "(B·∫°n)" in selected_text:
            # Kh√¥ng cho ph√©p nh·∫Øn tin cho ch√≠nh m√¨nh
            messagebox.showinfo("Th√¥ng b√°o", "B·∫°n kh√¥ng th·ªÉ nh·∫Øn tin cho ch√≠nh m√¨nh!")
            selected_user = None
            recipient_label.config(text="G·ª≠i ƒë·∫øn: T·∫•t c·∫£", fg="#2196F3")
        else:
            # Lo·∫°i b·ªè icon v√† l·∫•y t√™n
            selected_user = selected_text.replace("üë§ ", "").strip()
            recipient_label.config(text=f"G·ª≠i ƒë·∫øn: {selected_user} (Ri√™ng t∆∞)", fg="#FF5722")

def send_message(event=None):
    message = entry.get().strip()
    if not message:
        return
    try:
        # Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng g√µ l·ªánh /pm th·ªß c√¥ng
        if message.startswith("/pm "):
            # Ph√¢n t√≠ch l·ªánh /pm ƒë·ªÉ ki·ªÉm tra ng∆∞·ªùi nh·∫≠n
            parts = message.split(maxsplit=2)
            if len(parts) >= 2:
                target = parts[1].strip()
                if target == my_username:
                    messagebox.showwarning("C·∫£nh b√°o", "B·∫°n kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn ri√™ng cho ch√≠nh m√¨nh!")
                    return
            # G·ª≠i l·ªánh /pm
            client.sendall((message + "\n").encode(ENC))
        elif selected_user:
            # G·ª≠i tin nh·∫Øn ri√™ng qua UI (ƒë√£ ch·ªçn ng∆∞·ªùi d√πng)
            client.sendall(f"/pm {selected_user} {message}\n".encode(ENC))
        else:
            # G·ª≠i tin nh·∫Øn c√¥ng khai
            client.sendall((message + "\n").encode(ENC))
        entry.delete(0, tk.END)
    except Exception as e:
        messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn: {e}")

def refresh_users():
    """L√†m m·ªõi danh s√°ch ng∆∞·ªùi d√πng"""
    update_user_list()

def on_closing():
    """X·ª≠ l√Ω khi ƒë√≥ng c·ª≠a s·ªï"""
    try:
        client.sendall("/quit\n".encode(ENC))
        client.close()
    except:
        pass
    root.destroy()

# K·∫øt n·ªëi t·ªõi server
client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
try:
    client.connect(('127.0.0.1', 60000))
except Exception as e:
    print(f"Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi server: {e}")
    exit(1)

root = tk.Tk()
root.title("üí¨ Chat App")
root.geometry("900x600")
root.configure(bg="#f5f5f5")

# Y√™u c·∫ßu ng∆∞·ªùi d√πng nh·∫≠p t√™n
my_username = simpledialog.askstring("T√™n ng∆∞·ªùi d√πng", "Nh·∫≠p t√™n c·ªßa b·∫°n:", parent=root)
if not my_username:
    messagebox.showerror("L·ªói", "B·∫°n ph·∫£i nh·∫≠p t√™n!")
    client.close()
    root.destroy()
    exit(1)

# G·ª≠i l·ªánh /nick ƒë·ªÉ ƒë·∫∑t t√™n
try:
    client.sendall(f"/nick {my_username}\n".encode(ENC))
except Exception as e:
    messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ ƒë·∫∑t t√™n: {e}")
    client.close()
    root.destroy()
    exit(1)

# Frame ch√≠nh
main_frame = tk.Frame(root, bg="#f5f5f5")
main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

# Frame b√™n tr√°i - Danh s√°ch ng∆∞·ªùi d√πng
left_frame = tk.Frame(main_frame, bg="white", relief=tk.RAISED, borderwidth=1)
left_frame.pack(side=tk.LEFT, fill=tk.BOTH, padx=(0, 5))

users_title = tk.Label(left_frame, text="üë• Ng∆∞·ªùi d√πng Online", font=("Arial", 12, "bold"), 
                       bg="white", fg="#333", pady=10)
users_title.pack(fill=tk.X)

user_listbox = tk.Listbox(left_frame, width=25, font=("Arial", 10), 
                          bg="white", fg="#333", selectbackground="#2196F3",
                          selectforeground="white", relief=tk.FLAT, borderwidth=0)
user_listbox.pack(fill=tk.BOTH, expand=True, padx=5, pady=(0, 5))
user_listbox.bind('<<ListboxSelect>>', on_user_select)
user_listbox.insert(0, "üì¢ T·∫•t c·∫£")

refresh_btn = tk.Button(left_frame, text="üîÑ L√†m m·ªõi", command=refresh_users,
                       bg="#4CAF50", fg="white", font=("Arial", 9, "bold"),
                       relief=tk.FLAT, cursor="hand2", pady=5)
refresh_btn.pack(fill=tk.X, padx=5, pady=5)

# Frame b√™n ph·∫£i - Chat
right_frame = tk.Frame(main_frame, bg="white", relief=tk.RAISED, borderwidth=1)
right_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

# Header
header_frame = tk.Frame(right_frame, bg="#2196F3", height=50)
header_frame.pack(fill=tk.X)
header_frame.pack_propagate(False)

chat_title = tk.Label(header_frame, text=f"üí¨ Chat - {my_username}", 
                     font=("Arial", 14, "bold"), bg="#2196F3", fg="white")
chat_title.pack(side=tk.LEFT, padx=15, pady=10)

# Recipient label
recipient_label = tk.Label(header_frame, text="G·ª≠i ƒë·∫øn: T·∫•t c·∫£", 
                          font=("Arial", 10), bg="#2196F3", fg="white")
recipient_label.pack(side=tk.RIGHT, padx=15)

# Chat box v·ªõi m√†u s·∫Øc
chat_box = scrolledtext.ScrolledText(right_frame, state=tk.DISABLED, 
                                     width=60, height=20, wrap=tk.WORD,
                                     font=("Arial", 10), bg="#fafafa", 
                                     relief=tk.FLAT, borderwidth=0)
chat_box.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

# C·∫•u h√¨nh m√†u s·∫Øc cho c√°c lo·∫°i tin nh·∫Øn
chat_box.tag_config("message", foreground="#333")
chat_box.tag_config("pm", foreground="#FF5722", font=("Arial", 10, "bold"))
chat_box.tag_config("system", foreground="#9E9E9E", font=("Arial", 9, "italic"))

# Input frame
input_frame = tk.Frame(right_frame, bg="white")
input_frame.pack(fill=tk.X, padx=10, pady=(0, 10))

entry = tk.Entry(input_frame, font=("Arial", 11), relief=tk.FLAT, 
                bg="#f5f5f5", fg="#333", insertbackground="#2196F3")
entry.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, ipady=8, padx=(0, 5))
entry.bind("<Return>", send_message)
entry.focus()

send_button = tk.Button(input_frame, text="üì§ G·ª≠i", command=send_message,
                       bg="#2196F3", fg="white", font=("Arial", 10, "bold"),
                       relief=tk.FLAT, cursor="hand2", width=10, pady=8)
send_button.pack(side=tk.LEFT)

# B·∫Øt ƒë·∫ßu thread nh·∫≠n tin nh·∫Øn
thread = threading.Thread(target=receive_messages, daemon=True)
thread.start()

# T·ª± ƒë·ªông c·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi d√πng sau 1 gi√¢y
root.after(1000, update_user_list)

# X·ª≠ l√Ω ƒë√≥ng c·ª≠a s·ªï
root.protocol("WM_DELETE_WINDOW", on_closing)

root.mainloop()
